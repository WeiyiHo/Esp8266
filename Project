//==============================LIBRUARY=============================
//I2Cdev and MPU6050 libruaries
#include "Wire.h"
#include "I2Cdev.h"
#include "MPU6050.h"

//Timer libruary
#include "Ticker.h"

//ESP8266WiFi libruary
#include "ESP8266WiFi.h"

//==============================DEFINE================================
#define MPU_SDA 4  //#define ESP01_SDA 0
#define MPU_SDL 5  //#define ESP01_SDL 2

//#define server "ftp.buenacomputing.com"

#define sample_interval 0.1 // define sample interval 

//==============================VARIABLES=============================
MPU6050 accelgyro(0x68);
int16_t ax, ay, az, gx, gy, gz;

int mean_ax,mean_ay,mean_az,mean_gx,mean_gy,mean_gz,state=0;
int ax_offset,ay_offset,az_offset,gx_offset,gy_offset,gz_offset;

//Change this 3 variables if you want to fine tune the skecth to your needs.
int buffersize=1000;     //Amount of readings used to average, make it higher to get more precision but sketch will be slower  (default:1000)
int acel_deadzone=10;    //Acelerometer error allowed, make it lower to get more precision, but sketch may not converge  (default:8)
int giro_deadzone=2;     //Giro error allowed, make it lower to get more precision, but sketch may not converge  (default:1)

const char* ssid     = "HWY";
const char* password = "0955757812";
const char* ssid_softAP = "MYESP";
const char* password_softAP = "0955757812";

Ticker sense;

// Change this to the ip of the ftp server
IPAddress server( 192, 168, 100, 2 );


WiFiClient client;
WiFiClient dclient;

char outBuf[128];
char outCount;

int count_data = 0; // Count data received
String upload_data = "";  // Store data to upload

//==============================SETUP==============================
void setup()
{
  Serial.begin(9600);
  
  // We start by connecting to a WiFi network
  WiFi.mode(WIFI_AP_STA);
  WiFi.softAP(ssid_softAP, password_softAP);

  // Connect wifi
  connectwifi();
  
  // join I2C bus
  //Wire.begin(ESP01_SDA, ESP01_SDL);
  Wire.begin(MPU_SDA, MPU_SDL);

  // Initialize and Calibration
  Serial.println("Initializing I2C devices...");
  accelgyro.initialize();
  Serial.println("Press 'Y' to calibration / 'N' to ignore !");
  while(!Serial.available()){}
  if(Serial.read()=='Y')
    initialize();
    
  // sensemotion every interval
  sense.attach(sample_interval, sensemotion);
}

//==============================LOOP==============================
void loop()
{
   if(count_data >= 50)
  {
    sense.detach();

    // Test upload time -----
    unsigned long time;
    Serial.print("Time: ");
    time = millis();        
    Serial.println(time);
    //-----------------------
    
    if(sendFTP()) 
      Serial.println("FTP OK");
    else 
      Serial.println("FTP failed");
      
    //-----------------------  
    Serial.print("Time: ");
    time = millis();        
    Serial.println(time);
    //-----------------------
    
    count_data = 0;
    upload_data = "";
    sense.attach(sample_interval, sensemotion);
  }
  
  if(WiFi.status() != WL_CONNECTED)
    connectwifi();
}

//==============================FUNCTION==============================

void connectwifi()
{
  //Connect to AP
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");

  //wristband_server.begin();
  //Serial.println("Server started");

  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void initialize()
{
  // Wait for ready
  while (Serial.available() && Serial.read()); // empty buffer

  // Start message
  Serial.println("\nMPU6050 Calibration");
  delay(2000);
  Serial.println("\nYour MPU6050 should be placed in horizontal position, with package letters facing up. \nDon't touch it until you see a finish message.\n");
  delay(3000);
  // verify connection
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
  delay(1000);
  // reset offsets
  accelgyro.setXAccelOffset(0);
  accelgyro.setYAccelOffset(0);
  accelgyro.setZAccelOffset(0);
  accelgyro.setXGyroOffset(0);
  accelgyro.setYGyroOffset(0);
  accelgyro.setZGyroOffset(0);

  if (state==0)
  {
    Serial.println("\nReading sensors for first time...");
    meansensors();
    state++;
    delay(1000);
  }

  if (state==1)
  {
    Serial.println("\nCalculating offsets...");
    calibration();
    state++;
    delay(1000);
  }

  if (state==2)
  {
    meansensors();
    Serial.println("\nFINISHED!");
    Serial.print("\nSensor readings with offsets:\t");
    Serial.print(mean_ax); Serial.print("\t");
    Serial.print(mean_ay); Serial.print("\t");
    Serial.print(mean_az); Serial.print("\t");
    Serial.print(mean_gx); Serial.print("\t");
    Serial.print(mean_gy); Serial.print("\t");
    Serial.println(mean_gz);
    Serial.print("Your offsets:\t");
    Serial.print(ax_offset); Serial.print("\t");
    Serial.print(ay_offset); Serial.print("\t");
    Serial.print(az_offset); Serial.print("\t");
    Serial.print(gx_offset); Serial.print("\t");
    Serial.print(gy_offset); Serial.print("\t");
    Serial.println(gz_offset); 
    Serial.println("\nData is printed as: acelX acelY acelZ giroX giroY giroZ");
    Serial.println("Check that your sensor readings are close to 0 0 16384 0 0 0");
    Serial.println("If calibration was succesful write down your offsets so you can set them in your projects using something similar to mpu.setXAccelOffset(youroffset)");
  }
}

void meansensors()
{
  long i=0,buff_ax=0,buff_ay=0,buff_az=0,buff_gx=0,buff_gy=0,buff_gz=0;

  while (i<(buffersize+101))
  {
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    
    if (i>100 && i<=(buffersize+100))  //First 100 measures are discarded
    { 
      buff_ax=buff_ax+ax;
      buff_ay=buff_ay+ay;
      buff_az=buff_az+az;
      buff_gx=buff_gx+gx;
      buff_gy=buff_gy+gy;
      buff_gz=buff_gz+gz;
    }
    if (i==(buffersize+100))
    {
      mean_ax=buff_ax/buffersize;
      mean_ay=buff_ay/buffersize;
      mean_az=buff_az/buffersize;
      mean_gx=buff_gx/buffersize;
      mean_gy=buff_gy/buffersize;
      mean_gz=buff_gz/buffersize;
    }
    i++;
    delay(2); //Needed so we don't get repeated measures
  }
}

void calibration()
{
  ax_offset=-mean_ax/8;
  ay_offset=-mean_ay/8;
  az_offset=(16384-mean_az)/8;

  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1)
  {
    int ready=0;
    accelgyro.setXAccelOffset(ax_offset);
    accelgyro.setYAccelOffset(ay_offset);
    accelgyro.setZAccelOffset(az_offset);

    accelgyro.setXGyroOffset(gx_offset);
    accelgyro.setYGyroOffset(gy_offset);
    accelgyro.setZGyroOffset(gz_offset);

    meansensors();
    Serial.println("...");

    if (abs(mean_ax)<=acel_deadzone) ready++;
    else ax_offset=ax_offset-mean_ax/acel_deadzone;

    if (abs(mean_ay)<=acel_deadzone) ready++;
    else ay_offset=ay_offset-mean_ay/acel_deadzone;

    if (abs(16384-mean_az)<=acel_deadzone) ready++;
    else az_offset=az_offset+(16384-mean_az)/acel_deadzone;

    if (abs(mean_gx)<=giro_deadzone) ready++;
    else gx_offset=gx_offset-mean_gx/(giro_deadzone+1);

    if (abs(mean_gy)<=giro_deadzone) ready++;
    else gy_offset=gy_offset-mean_gy/(giro_deadzone+1);

    if (abs(mean_gz)<=giro_deadzone) ready++;
    else gz_offset=gz_offset-mean_gz/(giro_deadzone+1);

    if (ready==6) break;
  }
}

void sensemotion()
{
  // read raw accel/gyro measurements from device
  accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  // display to serial window
  Serial.print("a/g:\t");
  Serial.print(ax); Serial.print("\t");
  Serial.print(ay); Serial.print("\t");
  Serial.print(az); Serial.print("\t");
  Serial.print(gx); Serial.print("\t");
  Serial.print(gy); Serial.print("\t");
  Serial.println(gz);
  //Serial.println("");

  char upload_ax[10] = {0}, upload_ay[10] = {0}, upload_az[10] = {0};
  char upload_gx[10] = {0}, upload_gy[10] = {0}, upload_gz[10] = {0};
  
  sprintf(upload_ax,"%d",ax); sprintf(upload_ay,"%d",ay); sprintf(upload_az,"%d",az);
  sprintf(upload_gx,"%d",gx); sprintf(upload_gy,"%d",gy); sprintf(upload_gz,"%d",gz);
  
  upload_data = upload_data + upload_ax + " " + upload_ay + " " + upload_az + " " + upload_gx + " " + upload_gy + " " + upload_gz + " ";
  count_data++;
}

byte sendFTP()
{
  if (client.connect(server,21))
  {
    Serial.println("Command connected");
  } 
  else
  {
    Serial.println("Command connection failed");
    return 0;
  }

  if(!eRcv()) return 0;

  // Change to your user and password  
  client.write("USER ESP8266\r\n");
  //client.write("USER weiyiho@buenacomputing.com\r\n");

  if(!eRcv()) return 0;

  client.write("PASS 8888\r\n");
  //client.write("PASS Weiyi_1001\r\n");

  if(!eRcv()) return 0;

  client.write("SYST\r\n");

  if(!eRcv()) return 0;

  client.write("PASV\r\n");

  if(!eRcv()) return 0;

  char *tStr = strtok(outBuf,"(,");
  int array_pasv[6];
  for ( int i = 0; i < 6; i++)
  {
    tStr = strtok(NULL,"(,");
    array_pasv[i] = atoi(tStr);
    if(tStr == NULL)
    {
      Serial.println("Bad PASV Answer");    
      client.stop();
      return 0;  
    }
  }

  unsigned int hiPort,loPort;

  hiPort = array_pasv[4] << 8;
  loPort = array_pasv[5] & 255;

  Serial.print("Data port: ");
  hiPort = hiPort | loPort;
  Serial.println(hiPort);
 
  if (dclient.connect(server,hiPort))
  {
    Serial.println("Data connected");
  } 
  else
  {
    Serial.println("Data connection failed");
    client.stop();
    return 0;
  }

   client.write("APPE /test.txt\r\n");
   dclient.println(upload_data);
   
   client.write("QUIT\r\n");

   if(!eRcv()) return 0;

   dclient.stop();
   client.stop();
   Serial.println("disconnected");
   return 1;
}

byte eRcv()
{
  byte respCode;
  byte thisByte;

  while(!client.available()) delay(1);

  respCode = client.peek();

  outCount = 0;
  
  while(client.available())
  {  
    thisByte = client.read();    
    Serial.write(thisByte);

    if(outCount < 127)
    {
      outBuf[outCount] = thisByte;
      outCount++;      
      outBuf[outCount] = 0;
    }
  }

  if(respCode >= '4')
  {
    efail();
    return 0;  
  }

  return 1;
}


void efail()
{
  byte thisByte = 0;

  client.write("QUIT\r\n");

  while(!client.available()) delay(1);

  while(client.available())
  {  
    thisByte = client.read();    
    Serial.write(thisByte);
  }

  client.stop();
  dclient.stop();
  Serial.println("disconnected");
}
